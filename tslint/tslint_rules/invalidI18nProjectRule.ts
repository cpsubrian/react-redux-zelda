import * as ts from "typescript";
import * as Lint from "tslint";

import {tsml} from './tsml';


export class Rule extends Lint.Rules.AbstractRule {
  public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {
    return this.applyWithWalker(new InvalidI18nProjectWalker(sourceFile, this.getOptions()));
  }
}


class InvalidI18nProjectWalker extends Lint.RuleWalker {
  // Generated by running in a Python REPL:
  //
  // import dropbox.i18n.projects
  // sorted(dropbox.i18n.projects.I18nProjects.BY_NAME.keys())
  //
  // Please keep this in sync with the dropbox.i18n.projects Python module!
  private VALID_PROJECTS = [
    'admindash',
    'business-pages',
    'business-redesign',
    'cash-web',
    'client-web-setup-wizard',
    'dfb-groups',
    'dfb-onboarding',
    'dfb-quotes',
    'domains-management',
    'donotuse',
    'dropbox-style-guide',
    'emails',
    'file-requests',
    'financial-documents',
    'for-good-pages',
    'gifting-pages',
    'groups',
    'growth-exps',
    'guide-pages',
    'help',
    'help-content',
    'jobs-content',
    'js',
    'landing-pages',
    'limited-team',
    'maestro',
    'mobile-web',
    'multiaccount',
    'notifications',
    'onboarding',
    'photos',
    'pro-upgrade-dealpocalypse-copy',
    'pro-web',
    'qr-share',
    'referrals-page',
    'resellers',
    'selsync-restore',
    'sharing',
    'sonoma',
    'static-frozen',
    'test',
    'trybuy',
    'unknown',
    'upsell',
    'web'
  ];

  private invalidI18nProjectMessageFor(project: string): string {
    return tsml`The project '${project}' is not a valid i18n project. Please use
      a project defined in the Python module \`dropbox.i18n.projects\`, such as
      'web'.`;
  }

  private getProjectFieldFromObject(node: ts.ObjectLiteralExpression): string {
    const objectContents = node.getChildren()[1];
    const propertyAssignments: ts.PropertyAssignment[] = (
      objectContents.getChildren()
      .filter(node => node.kind === ts.SyntaxKind.PropertyAssignment)
    ) as ts.PropertyAssignment[];
    const projectPropertyAssignments = propertyAssignments.filter(node => (
      node.name.kind === ts.SyntaxKind.Identifier &&
      (node.name as ts.Identifier).text === 'project'
    ) || (
      node.name.kind === ts.SyntaxKind.StringLiteral &&
      (node.name as ts.StringLiteral).text === 'project'
    ));
    if (projectPropertyAssignments.length) {
      const projectAssignment = projectPropertyAssignments[0];
      if (projectAssignment.initializer.kind === ts.SyntaxKind.StringLiteral) {
        return (projectAssignment.initializer as ts.StringLiteral).text;
      }
    }
    return null;
  }

  protected visitCallExpression(node: ts.CallExpression) {
    const functionNameToProjectParamIndexMap: {[k: string]: number} = {
      _:         1,
      N_:        1,
      ungettext: 2,
      R_:        0,
      RP_:       0
    };

    const functionName: string = node.expression.getText();
    const projectParamIndex: number = functionNameToProjectParamIndexMap[functionName];

    if (projectParamIndex && node.arguments.length > projectParamIndex) {
      const projectParamNode: ts.Expression = node.arguments[projectParamIndex];
      if (projectParamNode.kind === ts.SyntaxKind.StringLiteral) {
        const project: string = (projectParamNode as ts.StringLiteral).text;
        if (this.VALID_PROJECTS.indexOf(project) === -1) {
          this.addFailure(this.createFailure(
            node.getStart(), node.getWidth(), this.invalidI18nProjectMessageFor(project)
          ));
        }
      } else if (projectParamNode.kind === ts.SyntaxKind.ObjectLiteralExpression) {
        const project: string = this.getProjectFieldFromObject(
          projectParamNode as ts.ObjectLiteralExpression);
        if (project != null && this.VALID_PROJECTS.indexOf(project) === -1) {
          this.addFailure(this.createFailure(
            node.getStart(), node.getWidth(), this.invalidI18nProjectMessageFor(project)
          ));
        }
      }
    }

    super.visitCallExpression(node);
  }
}
